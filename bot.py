import os
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ü–ï–†–í–´–ú, –¥–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
load_dotenv()

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
os.makedirs("temp", exist_ok=True)

from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

import asyncio
from filters.admin_only import AdminOnly, NonAdminOnly
from handlers import create_invoice_router, plug_router, trade_share_router, create_user_pdf_router


logging.basicConfig(level=logging.INFO)


TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_TOKEN:
    raise SystemExit("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


async def send_startup_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    main_admins = os.getenv("MAIN_ADMINS", "")
    if not main_admins:
        logging.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è MAIN_ADMINS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    
    admin_ids = [int(admin_id.strip()) for admin_id in main_admins.split(",") if admin_id.strip()]
    if not admin_ids:
        logging.warning("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç. –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    
    message_text = "ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n\n‚úÖ –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç"
    
    for admin_id in admin_ids:
        try:
            await bot.send_message(admin_id, message_text)
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(create_invoice_router)  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
dp.include_router(trade_share_router)  # –®–µ—Ä–∏–Ω–≥ —Å–¥–µ–ª–æ–∫ /okx
dp.include_router(create_user_pdf_router)  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ PDF
dp.include_router(plug_router)  # –ó–∞–≥–ª—É—à–∫–∏ (–ø–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–º)


if __name__ == "__main__":
    async def main():
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        await send_startup_message()
        
        await dp.start_polling(bot)
    asyncio.run(main())
