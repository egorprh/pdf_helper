import os
import uuid
import logging
from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from aiogram.enums import ChatAction
from aiogram.fsm.context import FSMContext

from states import UserPdfForm
from utils.render_pdf import html_to_pdf_playwright
from filters.admin_only import AdminOnly
from misc.keyboards import UserPdfKeyboards
from misc.constants import DEFAULT_PDF_PATH
from misc.utils import fill_title_html, merge_pdfs, cleanup_files

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ PDF
create_user_pdf_router = Router()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä
keyboards = UserPdfKeyboards()


@create_user_pdf_router.message(AdminOnly(), Command("create_user_pdf"))
async def start_create_user_pdf(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ PDF"""
    await state.clear()
    await message.answer(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ PDF\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ PDF:",
        reply_markup=keyboards.cancel_kb()
    )
    await state.set_state(UserPdfForm.user_name)


@create_user_pdf_router.message(AdminOnly(), StateFilter(UserPdfForm.user_name))
async def process_user_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_name = message.text.strip()
    if not user_name:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:",
            reply_markup=keyboards.cancel_kb()
        )
        return
    
    await state.update_data(user_name=user_name)
    await message.answer(
        f"‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {user_name}\n\n"
        "üìÅ –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π:",
        reply_markup=keyboards.file_choice_kb()
    )
    await state.set_state(UserPdfForm.pdf_file)


@create_user_pdf_router.callback_query(AdminOnly(), StateFilter(UserPdfForm.pdf_file))
async def handle_file_choice(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞"""
    data = callback.data
    
    if data == "cancel":
        await callback.message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ PDF –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        await callback.answer()
        return
    
    elif data == "use_existing":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        if not os.path.exists(DEFAULT_PDF_PATH):
            await callback.message.answer("‚ùå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            await callback.answer()
            return
        
        await state.update_data(pdf_path=DEFAULT_PDF_PATH, is_uploaded=False)
        await process_pdf_creation(callback, state, bot)
    
    await callback.answer()


@create_user_pdf_router.message(AdminOnly(), StateFilter(UserPdfForm.pdf_file))
async def handle_uploaded_file(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if not message.document:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π:",
            reply_markup=keyboards.file_choice_kb()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF —Ñ–∞–π–ª
    if not message.document.file_name.lower().endswith('.pdf'):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª:",
            reply_markup=keyboards.file_choice_kb()
        )
        return
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_filename = f"temp_uploaded_{uuid.uuid4().hex}.pdf"
    temp_path = f"output/{temp_filename}"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("output", exist_ok=True)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await bot.download_file(file.file_path, temp_path)
    
    await state.update_data(pdf_path=temp_path, is_uploaded=True)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ PDF
    await process_pdf_creation(message, state, bot)


async def process_pdf_creation(message_or_callback, state: FSMContext, bot: Bot):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF"""
    data = await state.get_data()
    user_name = data.get("user_name")
    pdf_path = data.get("pdf_path")
    is_uploaded = data.get("is_uploaded", False)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç message –∏ chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
    if hasattr(message_or_callback, 'message'):  # CallbackQuery
        message = message_or_callback.message
        chat_id = message.chat.id
    else:  # Message
        message = message_or_callback
        chat_id = message.chat.id
    
    if not user_name or not pdf_path:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF.")
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await bot.send_chat_action(chat_id, ChatAction.TYPING)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∏—Ç—É–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        temp_html_path = fill_title_html(user_name)
        title_pdf_path = f"output/title_{uuid.uuid4().hex}.pdf"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTML –≤ PDF —Å –∞–ª—å–±–æ–º–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
        success = await html_to_pdf_playwright(
            html_file_path=temp_html_path,
            output_pdf_path=title_pdf_path,
            landscape=True
        )
        
        if not success:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            cleanup_files([temp_html_path])
            await state.clear()
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º PDF —Ñ–∞–π–ª—ã
        final_pdf_path = f"output/final_{uuid.uuid4().hex}.pdf"
        merge_success = merge_pdfs(title_pdf_path, pdf_path, final_pdf_path)
        
        if not merge_success:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ PDF —Ñ–∞–π–ª–æ–≤.")
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            cleanup_files([temp_html_path, title_pdf_path])
            await state.clear()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_chat_action(chat_id, ChatAction.UPLOAD_DOCUMENT)
        await message.answer_document(
            FSInputFile(final_pdf_path, filename=f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è_–ø—Ä–æ–≥—Ä–∞–º–º–∞_{user_name}.pdf")
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        files_to_cleanup = [temp_html_path, title_pdf_path, final_pdf_path]
        if is_uploaded:
            files_to_cleanup.append(pdf_path)
        
        cleanup_files(files_to_cleanup)
        
        await message.answer("‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
        await state.clear()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()


@create_user_pdf_router.callback_query(AdminOnly(), StateFilter(UserPdfForm.user_name))
async def cancel_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
    if callback.data == "cancel":
        await callback.message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ PDF –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
    await callback.answer()